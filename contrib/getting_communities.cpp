// ====================================================================================================
//
// getting_communities.cpp
//
// author : Antoine Allard (antoine.allard.1@gmail.com)
// affil. : Université Laval, Québec, Canada
// www    : dynamica.phy.ulaval.ca (or is.gd/allard)
// created: 2011/07/22
// modif. : 2011/10/31
//
// This code uses the ".clusters" and ".cluster_stats" generated by the community detection algorithm
// of Ahn et al. as well as the ".numid2name" to generate a file where each line corresponds to an
// edge in the network and contains the following information:
//
// node_name1  node_name2  id_of_the community_it_belongs_to  density_of_the_community weighted_density_of_the_community
//
// ====================================================================================================




#include <fstream>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <cstdlib>   // for exit
#include <string>
#include <vector>


int main (int argc, char const *argv[])
{

  // names of the files that are used as input/ouput
  std::string numid2name_filename(argv[1]); numid2name_filename += ".numid2name"; // input file
  std::string clusters_filename(argv[1]); clusters_filename += ".clusters_"; clusters_filename += argv[2]; // input file
  std::string cluster_stats_filename(argv[1]); cluster_stats_filename += ".cluster_stats_"; cluster_stats_filename += argv[2]; // input file
  std::string communities_filename(argv[1]); communities_filename += ".communities_"; communities_filename += argv[2]; // input file

  // reads the ".numid2name" file and populates a vector containing the real names of nodes
  int node_numid;
  std::string node_name;
  std::vector<std::string> numid2name;
  std::ifstream numid2name_file( numid2name_filename.c_str() );
  if(!numid2name_file)
  {
    std::cout << "ERROR: unable to open .numid2name file" << std::endl;
    exit(1); // terminate with error
  }
  while(numid2name_file >> node_numid >> node_name)
    numid2name.push_back(node_name);
  numid2name_file.close();


  // reads the ".clusters" and ".cluster_stats" files
  std::ifstream clusters_file( clusters_filename.c_str() );
  std::ifstream cluster_stats_file( cluster_stats_filename.c_str() );
  std::ofstream communities_file( communities_filename.c_str() );
  if(!clusters_file)
  {
    std::cout << "ERROR: unable to open .clusters file" << std::endl;
    exit(1); // terminate with error
  }
  if(!cluster_stats_file)
  {
    std::cout << "ERROR: unable to open .cluster_stats file" << std::endl;
    exit(1); // terminate with error
  }


  int mc, nc, n1, n2, community_id(0);
  double density, w_c;
  size_t position;
  std::string a_line, an_edge;
//  std::vector<int> nodes;
  std::stringstream the_line;
  while( cluster_stats_file >> mc >> nc >> w_c)
  {
    if(nc == 2)
      density = 0.0;
    else
      density = static_cast<double>( mc - nc + 1 ) / static_cast<double>( nc*(nc-1)/2 - nc + 1 );

//    nodes.resize(nc);
    getline(clusters_file,a_line);
    the_line.str(a_line);// the_line >> std::ws;
    for(int i(0); i<mc; ++i)
    {
      // extracts the two end nodes of the edge
      the_line >> an_edge >> std::ws;
      position = an_edge.find(",");
      n1 = atoi(an_edge.substr(0,position).c_str());
      n2 = atoi(an_edge.substr(position+1, an_edge.length()).c_str());

      if(n1>=n2)
        std::swap(n1,n2);

      communities_file << std::fixed << std::setprecision(5);
      communities_file << numid2name[n1] << "\t";              // real name of node 1
      communities_file << numid2name[n2] << "\t";              // real name of node 2
      communities_file << community_id << "\t";                // community ID (to ease the identification)
      communities_file << density << "\t";                     // density
      communities_file << w_c * density << std::endl;          // weighted density
      the_line.clear();
    }
    ++community_id;
  }

  return 0;

}

